/*  Box2DWeb C# Wrapper for Saltarelle Compiler
  
  Copyright (c) 2014 Kenney Wong
  Modified and adapted from:
 
  Box2DX Copyright (c) 2009 Ihar Kalasouski http://code.google.com/p/box2dx  Box2D original C++ version Copyright (c) 2006-2009 Erin Catto http://www.gphysics.com  This software is provided 'as-is', without any express or implied  warranty.  In no event will the authors be held liable for any damages  arising from the use of this software.  Permission is granted to anyone to use this software for any purpose,  including commercial applications, and to alter it and redistribute it  freely, subject to the following restrictions:  1. The origin of this software must not be misrepresented; you must not     claim that you wrote the original software. If you use this software     in a product, an acknowledgment in the product documentation would be     appreciated but is not required.  2. Altered source versions must be plainly marked as such, and must not be     misrepresented as being the original software.  3. This notice may not be removed or altered from any source distribution.*/

using System;using System.Html;using System.Runtime.CompilerServices;namespace Box2DWeb{	/// <summary>	/// A body definition holds all the data needed to construct a rigid body.	/// You can safely re-use body definitions.	/// </summary>	[Imported]	[IgnoreNamespace]
	[PreserveMemberCase]
	public class B2BodyDef	{
		/// <summary>
		/// This constructor sets the body definition default values.
		/// </summary>
		public B2BodyDef()
		{
		}

		/// <summary>
		/// One of B2Body types: B2Body.b2_staticBody, B2Body.b2_kinematicBody B2Body.b2_dynamicBody
		/// </summary>
		public short type;

		/// <summary>		/// You can use this to initialized the mass properties of the body.		/// If you prefer, you can set the mass properties after the shapes		/// have been added using Body.SetMassFromShapes.		/// </summary>
		public B2MassData b2MassData;		/// <summary>		/// Use this to store application specific body data.		/// </summary>		public object userData;		/// <summary>		/// The world position of the body. Avoid creating bodies at the origin		/// since this can lead to many overlapping shapes.		/// </summary>		public B2Vec2 position;		/// <summary>		/// The world angle of the body in radians.		/// </summary>		public float angle;		/// The linear velocity of the body in world co-ordinates.		public B2Vec2 LinearVelocity;		// The angular velocity of the body.		public float angularVelocity;		/// <summary>		/// Linear damping is use to reduce the linear velocity. The damping parameter		/// can be larger than 1.0f but the damping effect becomes sensitive to the		/// time step when the damping parameter is large.		/// </summary>		public float linearDamping;		/// <summary>		/// Angular damping is use to reduce the angular velocity. The damping parameter		/// can be larger than 1.0f but the damping effect becomes sensitive to the		/// time step when the damping parameter is large.		/// </summary>		public float angularDamping;		/// <summary>		/// Set this flag to false if this body should never fall asleep. Note that		/// this increases CPU usage.		/// </summary>		public bool allowSleep;		/// <summary>		/// Is this body initially sleeping?		/// </summary>		public bool isSleeping;		/// <summary>		/// Should this body be prevented from rotating? Useful for characters.		/// </summary>		public bool fixedRotation;		/// <summary>		/// Is this a fast moving body that should be prevented from tunneling through		/// other moving bodies? Note that all bodies are prevented from tunneling through		/// static bodies.		/// @warning You should use this flag sparingly since it increases processing time.		/// </summary>		public bool isBullet;	}	/// <summary>	/// A rigid body. These are created via World.CreateBody.	/// </summary>	[Imported]	[IgnoreNamespace]
	[PreserveMemberCase]
	public class B2Body	{		public const short e_islandFlag = 0x0001;		public const short e_awakeFlag = 0x0002;		public const short e_allowSleepFlag = 0x0004;		public const short e_bulletFlag = 0x0008;		public const short e_fixedRotationFlag = 0x0010;		public const short e_activeFlag = 0x0020;		public const short b2_staticBody = 0;		public const short b2_kinematicBody = 1;		public const short b2_dynamicBody = 2;		internal B2Body(B2BodyDef bd, B2World world)		{		}		internal bool SynchronizeFixtures()		{			return false;		}

		/// <summary>
		/// One of B2Body types: B2Body.b2_staticBody, B2Body.b2_kinematicBody B2Body.b2_dynamicBody
		/// </summary>
		public new short GetType()
		{
			return 0;
		}

		/// <summary>		/// Creates a fixture and attach it to this body.		/// @warning This function is locked during callbacks.		/// </summary>		/// <param name="def">The fixture definition.</param>		public B2Fixture CreateFixture(B2FixtureDef def)		{			return null;		}		/// <summary>		/// Destroy a fixture. This removes the fixture from the broad-phase and		/// therefore destroys any contacts associated with this fixture. All fixtures		/// attached to a body are implicitly destroyed when the body is destroyed.		/// @warning This function is locked during callbacks.		/// </summary>		/// <param name="fixture">The fixture to be removed.</param>		public void DestroyFixture(B2Fixture fixture)		{		}		/// <summary>		/// Set the mass properties. Note that this changes the center of mass position.		/// If you are not sure how to compute mass properties, use SetMassFromShapes.		/// The inertia tensor is assumed to be relative to the center of mass.		/// </summary>		/// <param name="massData">The mass properties.</param>		public void SetMass(B2MassData massData)		{		}		/// <summary>		/// Compute the mass properties from the attached shapes. You typically call this		/// after adding all the shapes. If you add or remove shapes later, you may want		/// to call this again. Note that this changes the center of mass position.		/// </summary>		public void SetMassFromShapes()		{		}		/// <summary>		/// Set the position of the body's origin and rotation (radians).		/// This breaks any contacts and wakes the other bodies.		/// </summary>		/// <param name="position">The new world position of the body's origin (not necessarily		/// the center of mass).</param>		/// <param name="angle">The new world rotation angle of the body in radians.</param>		/// <returns>Return false if the movement put a shape outside the world. In this case the		/// body is automatically frozen.</returns>		public bool SetPositionAndAngle(B2Vec2 position, float angle)		{			return false;		}		/// <summary>		/// Set the position of the body's origin and rotation (radians).		/// This breaks any contacts and wakes the other bodies.		/// Note this is less efficient than the other overload - you should use that		/// if the angle is available.		/// </summary>		/// <param name="xf">The transform of position and angle to set the body to.</param>		/// <returns>False if the movement put a shape outside the world. In this case the		/// body is automatically frozen.</returns>		public bool SetTransform(B2Transform xf)		{			return false;		}		/// <summary>		/// Get the body transform for the body's origin.		/// </summary>		/// <returns>Return the world transform of the body's origin.</returns>		public B2Transform GetB2Transform()		{			return null;		}		/// <summary>		/// Set the world body origin position.		/// </summary>		/// <param name="position">The new position of the body.</param>		public void SetPosition(B2Vec2 position)		{		}		/// <summary>		/// Set the world body angle.		/// </summary>		/// <param name="angle">The new angle of the body.</param>		public void SetAngle(float angle)		{		}		/// <summary>		/// Get the world body origin position.		/// </summary>		/// <returns>Return the world position of the body's origin.</returns>		public B2Vec2 GetPosition()		{			return null;		}		/// <summary>		/// Get the angle in radians.		/// </summary>		/// <returns>Return the current world rotation angle in radians.</returns>		public float GetAngle()		{			return 0;		}		/// <summary>		/// Get the world position of the center of a.		/// </summary>		/// <returns></returns>		public B2Vec2 GetWorldCenter()		{			return null;		}		/// <summary>		/// Get the local position of the center of mass.		/// </summary>		/// <returns></returns>		public B2Vec2 GetLocalCenter()		{			return null;		}		/// <summary>		/// Set the linear velocity of the center of mass.		/// </summary>		/// <param name="v">The new linear velocity of the center of mass.</param>		public void SetLinearVelocity(B2Vec2 v)		{		}		/// <summary>		/// Get the linear velocity of the center of mass.		/// </summary>		/// <returns>Return the linear velocity of the center of mass.</returns>		public B2Vec2 GetLinearVelocity()		{			return null;		}		/// <summary>		/// Set the angular velocity.		/// </summary>		/// <param name="omega">The new angular velocity in radians/second.</param>		public void SetAngularVelocity(float w)		{		}		/// <summary>		/// Get the angular velocity.		/// </summary>		/// <returns>Return the angular velocity in radians/second.</returns>		public float GetAngularVelocity()		{			return 0;		}		/// <summary>		/// Apply a force at a world point. If the force is not		/// applied at the center of mass, it will generate a torque and		/// affect the angular velocity. This wakes up the body.		/// </summary>		/// <param name="force">The world force vector, usually in Newtons (N).</param>		/// <param name="point">The world position of the point of application.</param>		public void ApplyForce(B2Vec2 force, B2Vec2 point)		{		}		/// <summary>		/// Apply a torque. This affects the angular velocity		/// without affecting the linear velocity of the center of mass.		/// This wakes up the body.		/// </summary>		/// <param name="torque">Torque about the z-axis (out of the screen), usually in N-m.</param>		public void ApplyTorque(float torque)		{		}		/// <summary>		/// Apply an impulse at a point. This immediately modifies the velocity.		/// It also modifies the angular velocity if the point of application		/// is not at the center of mass. This wakes up the body.		/// </summary>		/// <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>		/// <param name="point">The world position of the point of application.</param>		public void ApplyImpulse(B2Vec2 impulse, B2Vec2 point)		{		}		/// <summary>		/// Get the total mass of the body.		/// </summary>		/// <returns>Return the mass, usually in kilograms (kg).</returns>		public float GetMass()		{			return 0;		}		/// <summary>		/// Get the central rotational inertia of the body.		/// </summary>		/// <returns>Return the rotational inertia, usually in kg-m^2.</returns>		public float GetInertia()		{			return 0;		}		/// <summary>		/// Get the mass data of the body.		/// </summary>		/// <returns>A struct containing the mass, inertia and center of the body.</returns>		public B2MassData GetMassData()		{			return null;		}		/// <summary>		/// Get the world coordinates of a point given the local coordinates.		/// </summary>		/// <param name="localPoint">A point on the body measured relative the the body's origin.</param>		/// <returns>Return the same point expressed in world coordinates.</returns>		public B2Vec2 GetWorldPoint(B2Vec2 localPoint)		{			return null;		}		/// <summary>		/// Get the world coordinates of a vector given the local coordinates.		/// </summary>		/// <param name="localVector">A vector fixed in the body.</param>		/// <returns>Return the same vector expressed in world coordinates.</returns>		public B2Vec2 GetWorldVector(B2Vec2 localVector)		{			return null;		}		/// <summary>		/// Gets a local point relative to the body's origin given a world point.		/// </summary>		/// <param name="worldPoint">A point in world coordinates.</param>		/// <returns>Return the corresponding local point relative to the body's origin.</returns>		public B2Vec2 GetLocalPoint(B2Vec2 worldPoint)		{			return null;		}		/// <summary>		/// Gets a local vector given a world vector.		/// </summary>		/// <param name="worldVector">A vector in world coordinates.</param>		/// <returns>Return the corresponding local vector.</returns>		public B2Vec2 GetLocalVector(B2Vec2 worldVector)		{			return null;		}		/// <summary>		/// Get the world linear velocity of a world point attached to this body.		/// </summary>		/// <param name="worldPoint">A point in world coordinates.</param>		/// <returns>The world velocity of a point.</returns>		public B2Vec2 GetLinearVelocityFromWorldPoint(B2Vec2 worldPoint)		{			return null;		}		/// <summary>		/// Get the world velocity of a local point.		/// </summary>		/// <param name="localPoint">A point in local coordinates.</param>		/// <returns>The world velocity of a point.</returns>		public B2Vec2 GetLinearVelocityFromLocalPoint(B2Vec2 localPoint)		{			return GetLinearVelocityFromWorldPoint(GetWorldPoint(localPoint));		}		public float GetLinearDamping()		{			return 0;		}		public void SetLinearDamping(float linearDamping)		{		}		public float GetAngularDamping()		{			return 0;		}		public void SetAngularDamping(float angularDamping)		{		}		/// <summary>		/// Is this body treated like a bullet for continuous collision detection?		/// </summary>		/// <returns></returns>		public bool IsBullet()		{			return false;		}		/// <summary>		/// Should this body be treated like a bullet for continuous collision detection?		/// </summary>		/// <param name="flag"></param>		public void SetBullet(bool flag)		{		}		public bool IsFixedRotation()		{			return false;		}		public void SetFixedRotation(bool fixedr)		{		}		public void SetStatic()		{		}

		public bool IsActive()
		{
			return false;
		}

		public bool IsSleepingAllowed()		{			return false;		}		/// <summary>		/// You can disable sleeping on this body.		/// </summary>		/// <param name="flag"></param>		public void SetSleepingAllowed(bool flag)		{		}		/// <summary>		/// Is this body awake.		/// </summary>		public bool IsAwake()		{			return false;		}		/// <summary>		/// Wake up this body so it will begin simulating.		/// </summary>		public void SetAwake(bool awake)		{		}		/// <summary>		/// Get the list of all fixtures attached to this body.		/// </summary>		/// <returns></returns>		public B2Fixture GetFixtureList()		{			return null;		}		///// <summary>		///// Get the list of all joints attached to this body.		///// </summary>		///// <returns></returns>		//public B2JointEdge GetJointList()		//{		//	return null;		//}		//public B2ControllerEdge GetControllerList()		//{		//	return null;		//}		/// <summary>		/// Get the next body in the world's body list.		/// </summary>		/// <returns></returns>		public B2Body GetNext()		{			return null;		}		/// <summary>		/// Get the user data pointer that was provided in the body definition.		/// </summary>		/// <returns></returns>		public object GetUserData()		{			return null;		}		/// <summary>		/// Set the user data. Use this to store your application specific data.		/// </summary>		/// <param name="data"></param>		public void SetUserData(object data) { }		/// <summary>		/// Get the parent world of this body.		/// </summary>		/// <returns></returns>		public B2World GetWorld() { return null; }		internal void SynchronizeTransform()		{		}		internal void Advance(float t)		{		}	}}